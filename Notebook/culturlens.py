# -*- coding: utf-8 -*-
"""CulturLens.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DhXkTQYw_Hy1t-soydiWT3G6qMsZRnys

## Import Libary and requirement
"""

import io
import numpy as np
import os
import tensorflow_hub as hub
import tensorflow as tf
import matplotlib.pyplot as plt

from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow import keras
from PIL import Image

"""## Preparation Data"""

from google.colab import drive
drive.mount('/content/drive')

dataset_path = '/content/drive/MyDrive/dataset_CulturLens'

penjor_dir = os.path.join(dataset_path, 'Penjor')
Canang_dir = os.path.join(dataset_path, 'Canang')
Pelinggih_dir = os.path.join(dataset_path, 'Pelinggih')
Pelangkiran_dir = os.path.join(dataset_path, 'Pelangkiran')
Gebogan_dir = os.path.join(dataset_path, 'Gebogan')
BantenSaiban_dir = os.path.join(dataset_path, 'banten_saiban')
kain_Poleng_dir = os.path.join(dataset_path, 'kain poleng')

print(f'total penjor images: {len(os.listdir(penjor_dir))}')
print(f'total Canang images: {len(os.listdir(Canang_dir))}')
print(f'total Pelinggih images: {len(os.listdir(Pelinggih_dir))}')
print(f'total Pelangkiran images: {len(os.listdir(Pelangkiran_dir))}')
print(f'total Gebogan images: {len(os.listdir(Gebogan_dir))}')
print(f'total BantenSaiban images: {len(os.listdir(BantenSaiban_dir))}')
print(f'total Kain Poleng images: {len(os.listdir(kain_Poleng_dir))}')

"""# Augmentasi Data"""

image_size = (150, 150)  # Resize images to this size
batch_size = 32         # Number of images to process at a time

datagen = ImageDataGenerator(
    rescale=1.0/255,          # Normalize pixel values to [0, 1]
    rotation_range=20,        # Random rotation
    width_shift_range=0.2,    # Horizontal shift
    height_shift_range=0.2,   # Vertical shift
    shear_range=0.2,          # Shearing
    zoom_range=0.2,           # Zooming
    horizontal_flip=True,     # Flip images horizontally
    validation_split=0.2      # Split data into training and validation sets
)

train_generator = datagen.flow_from_directory(
    dataset_path,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical',  # Use 'binary' for two classes
    subset='training'
)

validation_generator = datagen.flow_from_directory(
    dataset_path,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

# Get a batch of training images
images, labels = next(train_generator)

# Plot a few images
for i in range(9):
    plt.subplot(3, 3, i+1)
    plt.imshow(images[i])
    plt.axis('off')
plt.show()

# Load a pre-trained MobileNetV2 model (excluding the top layers)
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(150, 150, 3))

# Freeze the base model's layers so they are not updated during training
base_model.trainable = False

# Add custom classification layers on top
x = base_model.output
x = GlobalAveragePooling2D()(x)  # Global pooling to reduce dimensions
x = Dense(128, activation='relu')(x)  # Fully connected layer
predictions = Dense(train_generator.num_classes, activation='softmax')(x)  # Output layer

# Create the full model
model = Model(inputs=base_model.input, outputs=predictions)

model.compile(optimizer=Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=10,
)

#-----------------------------------------------------------
# Retrieve a list of list results on training and test data
# sets for each training epoch
#-----------------------------------------------------------
acc      = history.history[     'accuracy' ]
val_acc  = history.history[ 'val_accuracy' ]
loss     = history.history[    'loss' ]
val_loss = history.history['val_loss' ]

epochs   = range(len(acc)) # Get number of epochs

#------------------------------------------------
# Plot training and validation accuracy per epoch
#------------------------------------------------
plt.plot  ( epochs,     acc )
plt.plot  ( epochs, val_acc )
plt.title ('Training and validation accuracy')
plt.figure()

#------------------------------------------------
# Plot training and validation loss per epoch
#------------------------------------------------
plt.plot  ( epochs,     loss )
plt.plot  ( epochs, val_loss )
plt.title ('Training and validation loss'   )

def preprocess_image(image_path, target_size):

    # Muat gambar dan ubah ukurannya ke ukuran target
    img = load_img(image_path, target_size=target_size)
    # Konversi ke array numpy
    img_array = img_to_array(img)
    # Tambahkan dimensi batch
    img_array = np.expand_dims(img_array, axis=0)
    # Normalisasi piksel ke [0, 1]
    img_array /= 255.0
    return img_array

"""## Save Model"""

os.makedirs("/content/Save_model", exist_ok=True)

#Save model format HDF5
model.save("/content/Save_model/model.h5")

# Saved Model Format Json
model_json = model.to_json()
with open("/content/Save_model/model.json", "w") as json_file:
    json_file.write(model_json)
# Changed the filename to include .weights before .h5
model.save_weights("/content/Save_model/model_weights.weights.h5")

model.save("/content/Save_model/saved_model_file.keras")

!zip -r /content/Save_model.zip /content/Save_model

from google.colab import files
files.download("/content/Save_model.zip")

"""## Testing Model

"""

#Define a dictionary of custom objects:
custom_objects = {'KerasLayer': hub.KerasLayer}  # Use hub.KerasLayer

#Load the model with custom objects:
model = tf.keras.models.load_model('/content/Save_model/model.h5', custom_objects=custom_objects)

#Labeling Class
class_indices = {
    0: 'Canang',
    1: 'Gebogan',
    2: 'Pelangkiran',
    3: 'Pelinggih',
    4: 'Penjor',
    5: 'Banten Saiban',
    6: 'kain poleng'
}

from google.colab import files

#Unggah file gambar
uploaded = files.upload()

#Ambil path file yang diunggah
for file_name in uploaded.keys():
    print(f"File diunggah: {file_name}")
    image_path = file_name
    image = preprocess_image(image_path, target_size=(150, 150))
    predictions = model.predict(image)
    predicted_class = np.argmax(predictions[0])
    predicted_label = class_indices[predicted_class]
    print(f"Gambar yang diunggah diprediksi sebagai: {predicted_label}")